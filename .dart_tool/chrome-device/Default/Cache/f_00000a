define(['dart_sdk', 'packages/google_maps_flutter_platform_interface/src/types/utils/maps_object.dart', 'packages/google_maps_flutter_platform_interface/src/types/location.dart', 'packages/google_maps_flutter_platform_interface/src/types/tile.dart', 'packages/google_maps_flutter_platform_interface/src/types/maps_object.dart', 'packages/google_maps_flutter_platform_interface/src/types/joint_type.dart', 'packages/google_maps_flutter_platform_interface/src/types/pattern_item.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/google_maps_flutter_platform_interface/src/types/maps_object_updates.dart', 'packages/collection/src/equality.dart', 'packages/google_maps_flutter_platform_interface/src/types/bitmap.dart'], (function load__packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay_dart(dart_sdk, packages__google_maps_flutter_platform_interface__src__types__utils__maps_object$46dart, packages__google_maps_flutter_platform_interface__src__types__location$46dart, packages__google_maps_flutter_platform_interface__src__types__tile$46dart, packages__google_maps_flutter_platform_interface__src__types__maps_object$46dart, packages__google_maps_flutter_platform_interface__src__types__joint_type$46dart, packages__google_maps_flutter_platform_interface__src__types__pattern_item$46dart, packages__flutter__src__foundation__collections$46dart, packages__google_maps_flutter_platform_interface__src__types__maps_object_updates$46dart, packages__collection__src__equality$46dart, packages__google_maps_flutter_platform_interface__src__types__bitmap$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const maps_object = packages__google_maps_flutter_platform_interface__src__types__utils__maps_object$46dart.src__types__utils__maps_object;
  const location = packages__google_maps_flutter_platform_interface__src__types__location$46dart.src__types__location;
  const tile = packages__google_maps_flutter_platform_interface__src__types__tile$46dart.src__types__tile;
  const maps_object$ = packages__google_maps_flutter_platform_interface__src__types__maps_object$46dart.src__types__maps_object;
  const joint_type = packages__google_maps_flutter_platform_interface__src__types__joint_type$46dart.src__types__joint_type;
  const pattern_item = packages__google_maps_flutter_platform_interface__src__types__pattern_item$46dart.src__types__pattern_item;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const maps_object_updates = packages__google_maps_flutter_platform_interface__src__types__maps_object_updates$46dart.src__types__maps_object_updates;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const bitmap = packages__google_maps_flutter_platform_interface__src__types__bitmap$46dart.src__types__bitmap;
  var tile_overlay = Object.create(dart.library);
  var polyline = Object.create(dart.library);
  var polygon = Object.create(dart.library);
  var marker = Object.create(dart.library);
  var circle = Object.create(dart.library);
  var ui$ = Object.create(dart.library);
  var tile_provider = Object.create(dart.library);
  var tile_overlay$ = Object.create(dart.library);
  var polyline$ = Object.create(dart.library);
  var polyline_updates = Object.create(dart.library);
  var polygon$ = Object.create(dart.library);
  var polygon_updates = Object.create(dart.library);
  var marker$ = Object.create(dart.library);
  var marker_updates = Object.create(dart.library);
  var circle$ = Object.create(dart.library);
  var circle_updates = Object.create(dart.library);
  var cap = Object.create(dart.library);
  var camera = Object.create(dart.library);
  var callbacks = Object.create(dart.library);
  var types = Object.create(dart.library);
  var $cast = dartx.cast;
  var $runtimeType = dartx.runtimeType;
  var $hashCode = dartx.hashCode;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $_get = dartx._get;
  var $length = dartx.length;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $isNotEmpty = dartx.isNotEmpty;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    MapTypeL: () => (T.MapTypeL = dart.constFn(dart.legacy(ui$.MapType)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    JSArrayOfObjectN: () => (T.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T.ObjectN())))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    StringAndObjectNTovoid: () => (T.StringAndObjectNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T.ObjectN()])))(),
    ObjectL: () => (T.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    LatLngL: () => (T.LatLngL = dart.constFn(dart.legacy(location.LatLng)))(),
    PatternItemL: () => (T.PatternItemL = dart.constFn(dart.legacy(pattern_item.PatternItem)))(),
    ListOfPatternItem: () => (T.ListOfPatternItem = dart.constFn(core.List$(pattern_item.PatternItem)))(),
    ListOfLatLng: () => (T.ListOfLatLng = dart.constFn(core.List$(location.LatLng)))(),
    JSArrayOfObject: () => (T.JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))(),
    ListOfLatLngL: () => (T.ListOfLatLngL = dart.constFn(core.List$(T.LatLngL())))(),
    ListLOfLatLngL: () => (T.ListLOfLatLngL = dart.constFn(dart.legacy(T.ListOfLatLngL())))(),
    DefaultEqualityOfNeverL: () => (T.DefaultEqualityOfNeverL = dart.constFn(equality.DefaultEquality$(dart.legacy(dart.Never))))(),
    ListOfObject: () => (T.ListOfObject = dart.constFn(core.List$(core.Object)))(),
    JSArrayOfListOfObject: () => (T.JSArrayOfListOfObject = dart.constFn(_interceptors.JSArray$(T.ListOfObject())))(),
    JSArrayOfdouble: () => (T.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui$.MapType.prototype,
        [_name$]: "MapType.none",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui$.MapType.prototype,
        [_name$]: "MapType.normal",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui$.MapType.prototype,
        [_name$]: "MapType.satellite",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui$.MapType.prototype,
        [_name$]: "MapType.terrain",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui$.MapType.prototype,
        [_name$]: "MapType.hybrid",
        index: 4
      });
    },
    get C5() {
      return C[5] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4], T.MapTypeL());
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui$.CameraTargetBounds.prototype,
        [bounds$]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui$.MinMaxZoomPreference.prototype,
        [maxZoom$]: null,
        [minZoom$]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: tile.Tile.prototype,
        [Tile_data]: null,
        [Tile_height]: -1,
        [Tile_width]: -1
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C11() {
      return C[11] = dart.constList(["buttCap"], T.ObjectL());
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: cap.Cap.prototype,
        [Cap__json]: C[11] || CT.C11
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: joint_type.JointType.prototype,
        [JointType_value]: 0
      });
    },
    get C13() {
      return C[13] = dart.constList([], T.LatLngL());
    },
    get C14() {
      return C[14] = dart.constList([], T.PatternItemL());
    },
    get C15() {
      return C[15] = dart.constList([], T.ListLOfLatLngL());
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: T.DefaultEqualityOfNeverL().prototype
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: equality.DeepCollectionEquality.prototype,
        [DeepCollectionEquality__unordered]: false,
        [DeepCollectionEquality__base]: C[17] || CT.C17
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0.5
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: marker$.InfoWindow.prototype,
        [onTap$1]: null,
        [anchor$]: C[18] || CT.C18,
        [snippet$]: null,
        [title$]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 1,
        [OffsetBase__dx]: 0.5
      });
    },
    get C22() {
      return C[22] = dart.constList(["defaultMarker"], T.ObjectL());
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: bitmap.BitmapDescriptor.prototype,
        [BitmapDescriptor__json]: C[22] || CT.C22
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: location.LatLng.prototype,
        [LatLng_longitude]: 0,
        [LatLng_latitude]: 0
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 0
      });
    },
    get C26() {
      return C[26] = dart.constList(["roundCap"], T.ObjectL());
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: cap.Cap.prototype,
        [Cap__json]: C[26] || CT.C26
      });
    },
    get C28() {
      return C[28] = dart.constList(["squareCap"], T.ObjectL());
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: cap.Cap.prototype,
        [Cap__json]: C[28] || CT.C28
      });
    },
    get C30() {
      return C[30] = dart.constList(["zoomIn"], T.ObjectL());
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: camera.CameraUpdate.prototype,
        [_json$0]: C[30] || CT.C30
      });
    },
    get C32() {
      return C[32] = dart.constList(["zoomOut"], T.ObjectL());
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: camera.CameraUpdate.prototype,
        [_json$0]: C[32] || CT.C32
      });
    }
  }, false);
  var C = Array(33).fill(void 0);
  var I = [
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/utils/tile_overlay.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/utils/polyline.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/utils/polygon.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/utils/marker.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/utils/circle.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/ui.dart",
    "package:google_maps_flutter_platform_interface/src/types/ui.dart",
    "package:google_maps_flutter_platform_interface/src/types/tile_provider.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/tile_overlay.dart",
    "package:google_maps_flutter_platform_interface/src/types/tile_overlay.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/polyline.dart",
    "package:google_maps_flutter_platform_interface/src/types/polyline.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/polyline_updates.dart",
    "package:google_maps_flutter_platform_interface/src/types/polyline_updates.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/polygon.dart",
    "package:google_maps_flutter_platform_interface/src/types/polygon.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/polygon_updates.dart",
    "package:google_maps_flutter_platform_interface/src/types/polygon_updates.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/marker.dart",
    "package:google_maps_flutter_platform_interface/src/types/marker.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/marker_updates.dart",
    "package:google_maps_flutter_platform_interface/src/types/marker_updates.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/circle.dart",
    "package:google_maps_flutter_platform_interface/src/types/circle.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/circle_updates.dart",
    "package:google_maps_flutter_platform_interface/src/types/circle_updates.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/cap.dart",
    "package:google_maps_flutter_platform_interface/src/types/cap.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/camera.dart",
    "package:google_maps_flutter_platform_interface/src/types/camera.dart",
    "file:///C:/Users/prnav/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-2.0.2/lib/src/types/callbacks.dart",
    "package:google_maps_flutter_platform_interface/src/types/callbacks.dart"
  ];
  tile_overlay.keyTileOverlayId = function keyTileOverlayId(tileOverlays) {
    if (tileOverlays == null) dart.nullFailed(I[0], 10, 27, "tileOverlays");
    return maps_object.keyByMapsObjectId(tile_overlay$.TileOverlay, tileOverlays)[$cast](tile_overlay$.TileOverlayId, tile_overlay$.TileOverlay);
  };
  tile_overlay.serializeTileOverlaySet = function serializeTileOverlaySet(tileOverlays) {
    if (tileOverlays == null) dart.nullFailed(I[0], 16, 49, "tileOverlays");
    return maps_object.serializeMapsObjectSet(tileOverlays);
  };
  polyline.keyByPolylineId = function keyByPolylineId(polylines) {
    if (polylines == null) dart.nullFailed(I[1], 9, 62, "polylines");
    return maps_object.keyByMapsObjectId(polyline$.Polyline, polylines)[$cast](polyline$.PolylineId, polyline$.Polyline);
  };
  polyline.serializePolylineSet = function serializePolylineSet(polylines) {
    if (polylines == null) dart.nullFailed(I[1], 14, 43, "polylines");
    return maps_object.serializeMapsObjectSet(polylines);
  };
  polygon.keyByPolygonId = function keyByPolygonId(polygons) {
    if (polygons == null) dart.nullFailed(I[2], 9, 58, "polygons");
    return maps_object.keyByMapsObjectId(polygon$.Polygon, polygons)[$cast](polygon$.PolygonId, polygon$.Polygon);
  };
  polygon.serializePolygonSet = function serializePolygonSet(polygons) {
    if (polygons == null) dart.nullFailed(I[2], 14, 41, "polygons");
    return maps_object.serializeMapsObjectSet(polygons);
  };
  marker.keyByMarkerId = function keyByMarkerId(markers) {
    if (markers == null) dart.nullFailed(I[3], 9, 54, "markers");
    return maps_object.keyByMapsObjectId(marker$.Marker, markers)[$cast](marker$.MarkerId, marker$.Marker);
  };
  marker.serializeMarkerSet = function serializeMarkerSet(markers) {
    if (markers == null) dart.nullFailed(I[3], 14, 39, "markers");
    return maps_object.serializeMapsObjectSet(markers);
  };
  circle.keyByCircleId = function keyByCircleId(circles) {
    if (circles == null) dart.nullFailed(I[4], 9, 54, "circles");
    return maps_object.keyByMapsObjectId(circle$.Circle, circles)[$cast](circle$.CircleId, circle$.Circle);
  };
  circle.serializeCircleSet = function serializeCircleSet(circles) {
    if (circles == null) dart.nullFailed(I[4], 14, 39, "circles");
    return maps_object.serializeMapsObjectSet(circles);
  };
  var _name$ = dart.privateName(ui$, "_name");
  ui$.MapType = class MapType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui$.MapType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[5], 13, 6, "index");
    if (_name == null) dart.nullFailed(I[5], 13, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui$.MapType.prototype;
  dart.addTypeTests(ui$.MapType);
  dart.addTypeCaches(ui$.MapType);
  dart.setLibraryUri(ui$.MapType, I[6]);
  dart.setFieldSignature(ui$.MapType, () => ({
    __proto__: dart.getFields(ui$.MapType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui$.MapType, ['toString']);
  ui$.MapType.none = C[0] || CT.C0;
  ui$.MapType.normal = C[1] || CT.C1;
  ui$.MapType.satellite = C[2] || CT.C2;
  ui$.MapType.terrain = C[3] || CT.C3;
  ui$.MapType.hybrid = C[4] || CT.C4;
  ui$.MapType.values = C[5] || CT.C5;
  var bounds$ = dart.privateName(ui$, "CameraTargetBounds.bounds");
  ui$.CameraTargetBounds = class CameraTargetBounds extends core.Object {
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    toJson() {
      let t0;
      return T.JSArrayOfObjectN().of([(t0 = this.bounds, t0 == null ? null : t0.toJson())]);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = ui$.CameraTargetBounds.as(other);
      return dart.equals(this.bounds, typedOther.bounds);
    }
    get hashCode() {
      return dart.hashCode(this.bounds);
    }
    toString() {
      return "CameraTargetBounds(bounds: " + dart.str(this.bounds) + ")";
    }
  };
  (ui$.CameraTargetBounds.new = function(bounds) {
    this[bounds$] = bounds;
    ;
  }).prototype = ui$.CameraTargetBounds.prototype;
  dart.addTypeTests(ui$.CameraTargetBounds);
  dart.addTypeCaches(ui$.CameraTargetBounds);
  dart.setMethodSignature(ui$.CameraTargetBounds, () => ({
    __proto__: dart.getMethods(ui$.CameraTargetBounds.__proto__),
    toJson: dart.fnType(core.Object, [])
  }));
  dart.setLibraryUri(ui$.CameraTargetBounds, I[6]);
  dart.setFieldSignature(ui$.CameraTargetBounds, () => ({
    __proto__: dart.getFields(ui$.CameraTargetBounds.__proto__),
    bounds: dart.finalFieldType(dart.nullable(location.LatLngBounds))
  }));
  dart.defineExtensionMethods(ui$.CameraTargetBounds, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui$.CameraTargetBounds, ['hashCode']);
  dart.defineLazy(ui$.CameraTargetBounds, {
    /*ui$.CameraTargetBounds.unbounded*/get unbounded() {
      return C[6] || CT.C6;
    }
  }, false);
  var minZoom$ = dart.privateName(ui$, "MinMaxZoomPreference.minZoom");
  var maxZoom$ = dart.privateName(ui$, "MinMaxZoomPreference.maxZoom");
  ui$.MinMaxZoomPreference = class MinMaxZoomPreference extends core.Object {
    get minZoom() {
      return this[minZoom$];
    }
    set minZoom(value) {
      super.minZoom = value;
    }
    get maxZoom() {
      return this[maxZoom$];
    }
    set maxZoom(value) {
      super.maxZoom = value;
    }
    toJson() {
      return T.JSArrayOfObjectN().of([this.minZoom, this.maxZoom]);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = ui$.MinMaxZoomPreference.as(other);
      return this.minZoom == typedOther.minZoom && this.maxZoom == typedOther.maxZoom;
    }
    get hashCode() {
      return ui.hashValues(this.minZoom, this.maxZoom);
    }
    toString() {
      return "MinMaxZoomPreference(minZoom: " + dart.str(this.minZoom) + ", maxZoom: " + dart.str(this.maxZoom) + ")";
    }
  };
  (ui$.MinMaxZoomPreference.new = function(minZoom, maxZoom) {
    this[minZoom$] = minZoom;
    this[maxZoom$] = maxZoom;
    if (!(minZoom == null || maxZoom == null || dart.notNull(minZoom) <= dart.notNull(maxZoom))) dart.assertFailed(null, I[5], 76, 16, "minZoom == null || maxZoom == null || minZoom <= maxZoom");
    ;
  }).prototype = ui$.MinMaxZoomPreference.prototype;
  dart.addTypeTests(ui$.MinMaxZoomPreference);
  dart.addTypeCaches(ui$.MinMaxZoomPreference);
  dart.setMethodSignature(ui$.MinMaxZoomPreference, () => ({
    __proto__: dart.getMethods(ui$.MinMaxZoomPreference.__proto__),
    toJson: dart.fnType(core.Object, [])
  }));
  dart.setLibraryUri(ui$.MinMaxZoomPreference, I[6]);
  dart.setFieldSignature(ui$.MinMaxZoomPreference, () => ({
    __proto__: dart.getFields(ui$.MinMaxZoomPreference.__proto__),
    minZoom: dart.finalFieldType(dart.nullable(core.double)),
    maxZoom: dart.finalFieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(ui$.MinMaxZoomPreference, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui$.MinMaxZoomPreference, ['hashCode']);
  dart.defineLazy(ui$.MinMaxZoomPreference, {
    /*ui$.MinMaxZoomPreference.unbounded*/get unbounded() {
      return C[7] || CT.C7;
    }
  }, false);
  var cause$ = dart.privateName(ui$, "MapStyleException.cause");
  ui$.MapStyleException = class MapStyleException extends core.Object {
    get cause() {
      return this[cause$];
    }
    set cause(value) {
      super.cause = value;
    }
  };
  (ui$.MapStyleException.new = function(cause) {
    if (cause == null) dart.nullFailed(I[5], 114, 32, "cause");
    this[cause$] = cause;
    ;
  }).prototype = ui$.MapStyleException.prototype;
  dart.addTypeTests(ui$.MapStyleException);
  dart.addTypeCaches(ui$.MapStyleException);
  ui$.MapStyleException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(ui$.MapStyleException, I[6]);
  dart.setFieldSignature(ui$.MapStyleException, () => ({
    __proto__: dart.getFields(ui$.MapStyleException.__proto__),
    cause: dart.finalFieldType(core.String)
  }));
  var Tile_data = dart.privateName(tile, "Tile.data");
  var Tile_height = dart.privateName(tile, "Tile.height");
  var Tile_width = dart.privateName(tile, "Tile.width");
  tile_provider.TileProvider = class TileProvider extends core.Object {};
  (tile_provider.TileProvider.new = function() {
    ;
  }).prototype = tile_provider.TileProvider.prototype;
  dart.addTypeTests(tile_provider.TileProvider);
  dart.addTypeCaches(tile_provider.TileProvider);
  dart.setLibraryUri(tile_provider.TileProvider, I[7]);
  dart.defineLazy(tile_provider.TileProvider, {
    /*tile_provider.TileProvider.noTile*/get noTile() {
      return C[8] || CT.C8;
    }
  }, false);
  var tileOverlayId$ = dart.privateName(tile_overlay$, "TileOverlay.tileOverlayId");
  var fadeIn$ = dart.privateName(tile_overlay$, "TileOverlay.fadeIn");
  var tileProvider$ = dart.privateName(tile_overlay$, "TileOverlay.tileProvider");
  var transparency$ = dart.privateName(tile_overlay$, "TileOverlay.transparency");
  var zIndex$ = dart.privateName(tile_overlay$, "TileOverlay.zIndex");
  var visible$ = dart.privateName(tile_overlay$, "TileOverlay.visible");
  var tileSize$ = dart.privateName(tile_overlay$, "TileOverlay.tileSize");
  tile_overlay$.TileOverlay = class TileOverlay extends core.Object {
    get tileOverlayId() {
      return this[tileOverlayId$];
    }
    set tileOverlayId(value) {
      super.tileOverlayId = value;
    }
    get fadeIn() {
      return this[fadeIn$];
    }
    set fadeIn(value) {
      super.fadeIn = value;
    }
    get tileProvider() {
      return this[tileProvider$];
    }
    set tileProvider(value) {
      super.tileProvider = value;
    }
    get transparency() {
      return this[transparency$];
    }
    set transparency(value) {
      super.transparency = value;
    }
    get zIndex() {
      return this[zIndex$];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get visible() {
      return this[visible$];
    }
    set visible(value) {
      super.visible = value;
    }
    get tileSize() {
      return this[tileSize$];
    }
    set tileSize(value) {
      super.tileSize = value;
    }
    get mapsId() {
      return this.tileOverlayId;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2;
      let fadeInParam = opts && 'fadeInParam' in opts ? opts.fadeInParam : null;
      let transparencyParam = opts && 'transparencyParam' in opts ? opts.transparencyParam : null;
      let zIndexParam = opts && 'zIndexParam' in opts ? opts.zIndexParam : null;
      let visibleParam = opts && 'visibleParam' in opts ? opts.visibleParam : null;
      let tileSizeParam = opts && 'tileSizeParam' in opts ? opts.tileSizeParam : null;
      return new tile_overlay$.TileOverlay.new({tileOverlayId: this.tileOverlayId, fadeIn: (t0 = fadeInParam, t0 == null ? this.fadeIn : t0), transparency: (t0$ = transparencyParam, t0$ == null ? this.transparency : t0$), zIndex: (t0$0 = zIndexParam, t0$0 == null ? this.zIndex : t0$0), visible: (t0$1 = visibleParam, t0$1 == null ? this.visible : t0$1), tileSize: (t0$2 = tileSizeParam, t0$2 == null ? this.tileSize : t0$2)});
    }
    clone() {
      return this.copyWith();
    }
    toJson() {
      let json = new (T.IdentityMapOfString$Object()).new();
      function addIfPresent(fieldName, value) {
        if (fieldName == null) dart.nullFailed(I[8], 116, 30, "fieldName");
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringAndObjectNTovoid());
      addIfPresent("tileOverlayId", this.tileOverlayId.value);
      addIfPresent("fadeIn", this.fadeIn);
      addIfPresent("transparency", this.transparency);
      addIfPresent("zIndex", this.zIndex);
      addIfPresent("visible", this.visible);
      addIfPresent("tileSize", this.tileSize);
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      return tile_overlay$.TileOverlay.is(other) && dart.equals(this.tileOverlayId, other.tileOverlayId) && this.fadeIn == other.fadeIn && this.transparency == other.transparency && this.zIndex == other.zIndex && this.visible == other.visible && this.tileSize == other.tileSize;
    }
    get hashCode() {
      return ui.hashValues(this.tileOverlayId, this.fadeIn, this.transparency, this.zIndex, this.visible, this.tileSize);
    }
  };
  (tile_overlay$.TileOverlay.new = function(opts) {
    let tileOverlayId = opts && 'tileOverlayId' in opts ? opts.tileOverlayId : null;
    if (tileOverlayId == null) dart.nullFailed(I[8], 51, 19, "tileOverlayId");
    let fadeIn = opts && 'fadeIn' in opts ? opts.fadeIn : true;
    if (fadeIn == null) dart.nullFailed(I[8], 52, 10, "fadeIn");
    let tileProvider = opts && 'tileProvider' in opts ? opts.tileProvider : null;
    let transparency = opts && 'transparency' in opts ? opts.transparency : 0;
    if (transparency == null) dart.nullFailed(I[8], 54, 10, "transparency");
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : 0;
    if (zIndex == null) dart.nullFailed(I[8], 55, 10, "zIndex");
    let visible = opts && 'visible' in opts ? opts.visible : true;
    if (visible == null) dart.nullFailed(I[8], 56, 10, "visible");
    let tileSize = opts && 'tileSize' in opts ? opts.tileSize : 256;
    if (tileSize == null) dart.nullFailed(I[8], 57, 10, "tileSize");
    this[tileOverlayId$] = tileOverlayId;
    this[fadeIn$] = fadeIn;
    this[tileProvider$] = tileProvider;
    this[transparency$] = transparency;
    this[zIndex$] = zIndex;
    this[visible$] = visible;
    this[tileSize$] = tileSize;
    if (!(dart.notNull(transparency) >= 0.0 && dart.notNull(transparency) <= 1.0)) dart.assertFailed(null, I[8], 58, 15, "transparency >= 0.0 && transparency <= 1.0");
    ;
  }).prototype = tile_overlay$.TileOverlay.prototype;
  dart.addTypeTests(tile_overlay$.TileOverlay);
  dart.addTypeCaches(tile_overlay$.TileOverlay);
  tile_overlay$.TileOverlay[dart.implements] = () => [maps_object$.MapsObject];
  dart.setMethodSignature(tile_overlay$.TileOverlay, () => ({
    __proto__: dart.getMethods(tile_overlay$.TileOverlay.__proto__),
    copyWith: dart.fnType(tile_overlay$.TileOverlay, [], {fadeInParam: dart.nullable(core.bool), tileSizeParam: dart.nullable(core.int), transparencyParam: dart.nullable(core.double), visibleParam: dart.nullable(core.bool), zIndexParam: dart.nullable(core.int)}, {}),
    clone: dart.fnType(tile_overlay$.TileOverlay, []),
    toJson: dart.fnType(core.Object, [])
  }));
  dart.setGetterSignature(tile_overlay$.TileOverlay, () => ({
    __proto__: dart.getGetters(tile_overlay$.TileOverlay.__proto__),
    mapsId: tile_overlay$.TileOverlayId
  }));
  dart.setLibraryUri(tile_overlay$.TileOverlay, I[9]);
  dart.setFieldSignature(tile_overlay$.TileOverlay, () => ({
    __proto__: dart.getFields(tile_overlay$.TileOverlay.__proto__),
    tileOverlayId: dart.finalFieldType(tile_overlay$.TileOverlayId),
    fadeIn: dart.finalFieldType(core.bool),
    tileProvider: dart.finalFieldType(dart.nullable(tile_provider.TileProvider)),
    transparency: dart.finalFieldType(core.double),
    zIndex: dart.finalFieldType(core.int),
    visible: dart.finalFieldType(core.bool),
    tileSize: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(tile_overlay$.TileOverlay, ['_equals']);
  dart.defineExtensionAccessors(tile_overlay$.TileOverlay, ['hashCode']);
  tile_overlay$.TileOverlayId = class TileOverlayId extends maps_object$.MapsObjectId$(tile_overlay$.TileOverlay) {};
  (tile_overlay$.TileOverlayId.new = function(value) {
    if (value == null) dart.nullFailed(I[8], 16, 30, "value");
    tile_overlay$.TileOverlayId.__proto__.new.call(this, value);
    ;
  }).prototype = tile_overlay$.TileOverlayId.prototype;
  dart.addTypeTests(tile_overlay$.TileOverlayId);
  dart.addTypeCaches(tile_overlay$.TileOverlayId);
  dart.setLibraryUri(tile_overlay$.TileOverlayId, I[9]);
  var polylineId$ = dart.privateName(polyline$, "Polyline.polylineId");
  var consumeTapEvents$ = dart.privateName(polyline$, "Polyline.consumeTapEvents");
  var color$ = dart.privateName(polyline$, "Polyline.color");
  var geodesic$ = dart.privateName(polyline$, "Polyline.geodesic");
  var jointType$ = dart.privateName(polyline$, "Polyline.jointType");
  var patterns$ = dart.privateName(polyline$, "Polyline.patterns");
  var points$ = dart.privateName(polyline$, "Polyline.points");
  var startCap$ = dart.privateName(polyline$, "Polyline.startCap");
  var endCap$ = dart.privateName(polyline$, "Polyline.endCap");
  var visible$0 = dart.privateName(polyline$, "Polyline.visible");
  var width$ = dart.privateName(polyline$, "Polyline.width");
  var zIndex$0 = dart.privateName(polyline$, "Polyline.zIndex");
  var onTap$ = dart.privateName(polyline$, "Polyline.onTap");
  var Color_value = dart.privateName(ui, "Color.value");
  var Cap__json = dart.privateName(cap, "Cap._json");
  var JointType_value = dart.privateName(joint_type, "JointType.value");
  var _pointsToJson = dart.privateName(polyline$, "_pointsToJson");
  var _patternToJson = dart.privateName(polyline$, "_patternToJson");
  polyline$.Polyline = class Polyline extends core.Object {
    get polylineId() {
      return this[polylineId$];
    }
    set polylineId(value) {
      super.polylineId = value;
    }
    get consumeTapEvents() {
      return this[consumeTapEvents$];
    }
    set consumeTapEvents(value) {
      super.consumeTapEvents = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get geodesic() {
      return this[geodesic$];
    }
    set geodesic(value) {
      super.geodesic = value;
    }
    get jointType() {
      return this[jointType$];
    }
    set jointType(value) {
      super.jointType = value;
    }
    get patterns() {
      return this[patterns$];
    }
    set patterns(value) {
      super.patterns = value;
    }
    get points() {
      return this[points$];
    }
    set points(value) {
      super.points = value;
    }
    get startCap() {
      return this[startCap$];
    }
    set startCap(value) {
      super.startCap = value;
    }
    get endCap() {
      return this[endCap$];
    }
    set endCap(value) {
      super.endCap = value;
    }
    get visible() {
      return this[visible$0];
    }
    set visible(value) {
      super.visible = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get zIndex() {
      return this[zIndex$0];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get mapsId() {
      return this.polylineId;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9;
      let colorParam = opts && 'colorParam' in opts ? opts.colorParam : null;
      let consumeTapEventsParam = opts && 'consumeTapEventsParam' in opts ? opts.consumeTapEventsParam : null;
      let endCapParam = opts && 'endCapParam' in opts ? opts.endCapParam : null;
      let geodesicParam = opts && 'geodesicParam' in opts ? opts.geodesicParam : null;
      let jointTypeParam = opts && 'jointTypeParam' in opts ? opts.jointTypeParam : null;
      let patternsParam = opts && 'patternsParam' in opts ? opts.patternsParam : null;
      let pointsParam = opts && 'pointsParam' in opts ? opts.pointsParam : null;
      let startCapParam = opts && 'startCapParam' in opts ? opts.startCapParam : null;
      let visibleParam = opts && 'visibleParam' in opts ? opts.visibleParam : null;
      let widthParam = opts && 'widthParam' in opts ? opts.widthParam : null;
      let zIndexParam = opts && 'zIndexParam' in opts ? opts.zIndexParam : null;
      let onTapParam = opts && 'onTapParam' in opts ? opts.onTapParam : null;
      return new polyline$.Polyline.new({polylineId: this.polylineId, color: (t0 = colorParam, t0 == null ? this.color : t0), consumeTapEvents: (t0$ = consumeTapEventsParam, t0$ == null ? this.consumeTapEvents : t0$), endCap: (t0$0 = endCapParam, t0$0 == null ? this.endCap : t0$0), geodesic: (t0$1 = geodesicParam, t0$1 == null ? this.geodesic : t0$1), jointType: (t0$2 = jointTypeParam, t0$2 == null ? this.jointType : t0$2), patterns: (t0$3 = patternsParam, t0$3 == null ? this.patterns : t0$3), points: (t0$4 = pointsParam, t0$4 == null ? this.points : t0$4), startCap: (t0$5 = startCapParam, t0$5 == null ? this.startCap : t0$5), visible: (t0$6 = visibleParam, t0$6 == null ? this.visible : t0$6), width: (t0$7 = widthParam, t0$7 == null ? this.width : t0$7), onTap: (t0$8 = onTapParam, t0$8 == null ? this.onTap : t0$8), zIndex: (t0$9 = zIndexParam, t0$9 == null ? this.zIndex : t0$9)});
    }
    clone() {
      return this.copyWith({patternsParam: T.ListOfPatternItem().of(this.patterns), pointsParam: T.ListOfLatLng().of(this.points)});
    }
    toJson() {
      let json = new (T.IdentityMapOfString$Object()).new();
      function addIfPresent(fieldName, value) {
        if (fieldName == null) dart.nullFailed(I[10], 164, 30, "fieldName");
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringAndObjectNTovoid());
      addIfPresent("polylineId", this.polylineId.value);
      addIfPresent("consumeTapEvents", this.consumeTapEvents);
      addIfPresent("color", this.color.value);
      addIfPresent("endCap", this.endCap.toJson());
      addIfPresent("geodesic", this.geodesic);
      addIfPresent("jointType", this.jointType.value);
      addIfPresent("startCap", this.startCap.toJson());
      addIfPresent("visible", this.visible);
      addIfPresent("width", this.width);
      addIfPresent("zIndex", this.zIndex);
      if (this.points != null) {
        json[$_set]("points", this[_pointsToJson]());
      }
      if (this.patterns != null) {
        json[$_set]("pattern", this[_patternToJson]());
      }
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = polyline$.Polyline.as(other);
      return dart.equals(this.polylineId, typedOther.polylineId) && this.consumeTapEvents == typedOther.consumeTapEvents && dart.equals(this.color, typedOther.color) && this.geodesic == typedOther.geodesic && dart.equals(this.jointType, typedOther.jointType) && dart.test(collections.listEquals(pattern_item.PatternItem, this.patterns, typedOther.patterns)) && dart.test(collections.listEquals(location.LatLng, this.points, typedOther.points)) && dart.equals(this.startCap, typedOther.startCap) && dart.equals(this.endCap, typedOther.endCap) && this.visible == typedOther.visible && this.width == typedOther.width && this.zIndex == typedOther.zIndex;
    }
    get hashCode() {
      return dart.hashCode(this.polylineId);
    }
    [_pointsToJson]() {
      let result = T.JSArrayOfObject().of([]);
      for (let point of this.points) {
        result[$add](point.toJson());
      }
      return result;
    }
    [_patternToJson]() {
      let result = T.JSArrayOfObject().of([]);
      for (let patternItem of this.patterns) {
        if (patternItem != null) {
          result[$add](patternItem.toJson());
        }
      }
      return result;
    }
  };
  (polyline$.Polyline.new = function(opts) {
    let polylineId = opts && 'polylineId' in opts ? opts.polylineId : null;
    if (polylineId == null) dart.nullFailed(I[10], 27, 19, "polylineId");
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    if (consumeTapEvents == null) dart.nullFailed(I[10], 28, 10, "consumeTapEvents");
    let color = opts && 'color' in opts ? opts.color : C[9] || CT.C9;
    if (color == null) dart.nullFailed(I[10], 29, 10, "color");
    let endCap = opts && 'endCap' in opts ? opts.endCap : C[10] || CT.C10;
    if (endCap == null) dart.nullFailed(I[10], 30, 10, "endCap");
    let geodesic = opts && 'geodesic' in opts ? opts.geodesic : false;
    if (geodesic == null) dart.nullFailed(I[10], 31, 10, "geodesic");
    let jointType = opts && 'jointType' in opts ? opts.jointType : C[12] || CT.C12;
    if (jointType == null) dart.nullFailed(I[10], 32, 10, "jointType");
    let points = opts && 'points' in opts ? opts.points : C[13] || CT.C13;
    if (points == null) dart.nullFailed(I[10], 33, 10, "points");
    let patterns = opts && 'patterns' in opts ? opts.patterns : C[14] || CT.C14;
    if (patterns == null) dart.nullFailed(I[10], 34, 10, "patterns");
    let startCap = opts && 'startCap' in opts ? opts.startCap : C[10] || CT.C10;
    if (startCap == null) dart.nullFailed(I[10], 35, 10, "startCap");
    let visible = opts && 'visible' in opts ? opts.visible : true;
    if (visible == null) dart.nullFailed(I[10], 36, 10, "visible");
    let width = opts && 'width' in opts ? opts.width : 10;
    if (width == null) dart.nullFailed(I[10], 37, 10, "width");
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : 0;
    if (zIndex == null) dart.nullFailed(I[10], 38, 10, "zIndex");
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[polylineId$] = polylineId;
    this[consumeTapEvents$] = consumeTapEvents;
    this[color$] = color;
    this[endCap$] = endCap;
    this[geodesic$] = geodesic;
    this[jointType$] = jointType;
    this[points$] = points;
    this[patterns$] = patterns;
    this[startCap$] = startCap;
    this[visible$0] = visible;
    this[width$] = width;
    this[zIndex$0] = zIndex;
    this[onTap$] = onTap;
    ;
  }).prototype = polyline$.Polyline.prototype;
  dart.addTypeTests(polyline$.Polyline);
  dart.addTypeCaches(polyline$.Polyline);
  polyline$.Polyline[dart.implements] = () => [maps_object$.MapsObject];
  dart.setMethodSignature(polyline$.Polyline, () => ({
    __proto__: dart.getMethods(polyline$.Polyline.__proto__),
    copyWith: dart.fnType(polyline$.Polyline, [], {colorParam: dart.nullable(ui.Color), consumeTapEventsParam: dart.nullable(core.bool), endCapParam: dart.nullable(cap.Cap), geodesicParam: dart.nullable(core.bool), jointTypeParam: dart.nullable(joint_type.JointType), onTapParam: dart.nullable(dart.fnType(dart.void, [])), patternsParam: dart.nullable(core.List$(pattern_item.PatternItem)), pointsParam: dart.nullable(core.List$(location.LatLng)), startCapParam: dart.nullable(cap.Cap), visibleParam: dart.nullable(core.bool), widthParam: dart.nullable(core.int), zIndexParam: dart.nullable(core.int)}, {}),
    clone: dart.fnType(polyline$.Polyline, []),
    toJson: dart.fnType(core.Object, []),
    [_pointsToJson]: dart.fnType(core.Object, []),
    [_patternToJson]: dart.fnType(core.Object, [])
  }));
  dart.setGetterSignature(polyline$.Polyline, () => ({
    __proto__: dart.getGetters(polyline$.Polyline.__proto__),
    mapsId: polyline$.PolylineId
  }));
  dart.setLibraryUri(polyline$.Polyline, I[11]);
  dart.setFieldSignature(polyline$.Polyline, () => ({
    __proto__: dart.getFields(polyline$.Polyline.__proto__),
    polylineId: dart.finalFieldType(polyline$.PolylineId),
    consumeTapEvents: dart.finalFieldType(core.bool),
    color: dart.finalFieldType(ui.Color),
    geodesic: dart.finalFieldType(core.bool),
    jointType: dart.finalFieldType(joint_type.JointType),
    patterns: dart.finalFieldType(core.List$(pattern_item.PatternItem)),
    points: dart.finalFieldType(core.List$(location.LatLng)),
    startCap: dart.finalFieldType(cap.Cap),
    endCap: dart.finalFieldType(cap.Cap),
    visible: dart.finalFieldType(core.bool),
    width: dart.finalFieldType(core.int),
    zIndex: dart.finalFieldType(core.int),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  dart.defineExtensionMethods(polyline$.Polyline, ['_equals']);
  dart.defineExtensionAccessors(polyline$.Polyline, ['hashCode']);
  polyline$.PolylineId = class PolylineId extends maps_object$.MapsObjectId$(polyline$.Polyline) {};
  (polyline$.PolylineId.new = function(value) {
    if (value == null) dart.nullFailed(I[10], 19, 27, "value");
    polyline$.PolylineId.__proto__.new.call(this, value);
    ;
  }).prototype = polyline$.PolylineId.prototype;
  dart.addTypeTests(polyline$.PolylineId);
  dart.addTypeCaches(polyline$.PolylineId);
  dart.setLibraryUri(polyline$.PolylineId, I[11]);
  polyline_updates.PolylineUpdates = class PolylineUpdates extends maps_object_updates.MapsObjectUpdates$(polyline$.Polyline) {
    get polylinesToAdd() {
      return this.objectsToAdd;
    }
    get polylineIdsToRemove() {
      return this.objectIdsToRemove.cast(polyline$.PolylineId);
    }
    get polylinesToChange() {
      return this.objectsToChange;
    }
  };
  (polyline_updates.PolylineUpdates.from = function(previous, current) {
    if (previous == null) dart.nullFailed(I[12], 13, 38, "previous");
    if (current == null) dart.nullFailed(I[12], 13, 62, "current");
    polyline_updates.PolylineUpdates.__proto__.from.call(this, previous, current, {objectName: "polyline"});
    ;
  }).prototype = polyline_updates.PolylineUpdates.prototype;
  dart.addTypeTests(polyline_updates.PolylineUpdates);
  dart.addTypeCaches(polyline_updates.PolylineUpdates);
  dart.setGetterSignature(polyline_updates.PolylineUpdates, () => ({
    __proto__: dart.getGetters(polyline_updates.PolylineUpdates.__proto__),
    polylinesToAdd: core.Set$(polyline$.Polyline),
    polylineIdsToRemove: core.Set$(polyline$.PolylineId),
    polylinesToChange: core.Set$(polyline$.Polyline)
  }));
  dart.setLibraryUri(polyline_updates.PolylineUpdates, I[13]);
  var polygonId$ = dart.privateName(polygon$, "Polygon.polygonId");
  var consumeTapEvents$0 = dart.privateName(polygon$, "Polygon.consumeTapEvents");
  var fillColor$ = dart.privateName(polygon$, "Polygon.fillColor");
  var geodesic$0 = dart.privateName(polygon$, "Polygon.geodesic");
  var points$0 = dart.privateName(polygon$, "Polygon.points");
  var holes$ = dart.privateName(polygon$, "Polygon.holes");
  var visible$1 = dart.privateName(polygon$, "Polygon.visible");
  var strokeColor$ = dart.privateName(polygon$, "Polygon.strokeColor");
  var strokeWidth$ = dart.privateName(polygon$, "Polygon.strokeWidth");
  var zIndex$1 = dart.privateName(polygon$, "Polygon.zIndex");
  var onTap$0 = dart.privateName(polygon$, "Polygon.onTap");
  var _pointsToJson$ = dart.privateName(polygon$, "_pointsToJson");
  var _holesToJson = dart.privateName(polygon$, "_holesToJson");
  var DeepCollectionEquality__unordered = dart.privateName(equality, "DeepCollectionEquality._unordered");
  var DeepCollectionEquality__base = dart.privateName(equality, "DeepCollectionEquality._base");
  polygon$.Polygon = class Polygon extends core.Object {
    get polygonId() {
      return this[polygonId$];
    }
    set polygonId(value) {
      super.polygonId = value;
    }
    get consumeTapEvents() {
      return this[consumeTapEvents$0];
    }
    set consumeTapEvents(value) {
      super.consumeTapEvents = value;
    }
    get fillColor() {
      return this[fillColor$];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get geodesic() {
      return this[geodesic$0];
    }
    set geodesic(value) {
      super.geodesic = value;
    }
    get points() {
      return this[points$0];
    }
    set points(value) {
      super.points = value;
    }
    get holes() {
      return this[holes$];
    }
    set holes(value) {
      super.holes = value;
    }
    get visible() {
      return this[visible$1];
    }
    set visible(value) {
      super.visible = value;
    }
    get strokeColor() {
      return this[strokeColor$];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get zIndex() {
      return this[zIndex$1];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get onTap() {
      return this[onTap$0];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get mapsId() {
      return this.polygonId;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7;
      let consumeTapEventsParam = opts && 'consumeTapEventsParam' in opts ? opts.consumeTapEventsParam : null;
      let fillColorParam = opts && 'fillColorParam' in opts ? opts.fillColorParam : null;
      let geodesicParam = opts && 'geodesicParam' in opts ? opts.geodesicParam : null;
      let pointsParam = opts && 'pointsParam' in opts ? opts.pointsParam : null;
      let holesParam = opts && 'holesParam' in opts ? opts.holesParam : null;
      let strokeColorParam = opts && 'strokeColorParam' in opts ? opts.strokeColorParam : null;
      let strokeWidthParam = opts && 'strokeWidthParam' in opts ? opts.strokeWidthParam : null;
      let visibleParam = opts && 'visibleParam' in opts ? opts.visibleParam : null;
      let zIndexParam = opts && 'zIndexParam' in opts ? opts.zIndexParam : null;
      let onTapParam = opts && 'onTapParam' in opts ? opts.onTapParam : null;
      return new polygon$.Polygon.new({polygonId: this.polygonId, consumeTapEvents: (t0 = consumeTapEventsParam, t0 == null ? this.consumeTapEvents : t0), fillColor: (t0$ = fillColorParam, t0$ == null ? this.fillColor : t0$), geodesic: (t0$0 = geodesicParam, t0$0 == null ? this.geodesic : t0$0), points: (t0$1 = pointsParam, t0$1 == null ? this.points : t0$1), holes: (t0$2 = holesParam, t0$2 == null ? this.holes : t0$2), strokeColor: (t0$3 = strokeColorParam, t0$3 == null ? this.strokeColor : t0$3), strokeWidth: (t0$4 = strokeWidthParam, t0$4 == null ? this.strokeWidth : t0$4), visible: (t0$5 = visibleParam, t0$5 == null ? this.visible : t0$5), onTap: (t0$6 = onTapParam, t0$6 == null ? this.onTap : t0$6), zIndex: (t0$7 = zIndexParam, t0$7 == null ? this.zIndex : t0$7)});
    }
    clone() {
      return this.copyWith({pointsParam: T.ListOfLatLng().of(this.points)});
    }
    toJson() {
      let json = new (T.IdentityMapOfString$Object()).new();
      function addIfPresent(fieldName, value) {
        if (fieldName == null) dart.nullFailed(I[14], 134, 30, "fieldName");
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringAndObjectNTovoid());
      addIfPresent("polygonId", this.polygonId.value);
      addIfPresent("consumeTapEvents", this.consumeTapEvents);
      addIfPresent("fillColor", this.fillColor.value);
      addIfPresent("geodesic", this.geodesic);
      addIfPresent("strokeColor", this.strokeColor.value);
      addIfPresent("strokeWidth", this.strokeWidth);
      addIfPresent("visible", this.visible);
      addIfPresent("zIndex", this.zIndex);
      if (this.points != null) {
        json[$_set]("points", this[_pointsToJson$]());
      }
      if (this.holes != null) {
        json[$_set]("holes", this[_holesToJson]());
      }
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = polygon$.Polygon.as(other);
      return dart.equals(this.polygonId, typedOther.polygonId) && this.consumeTapEvents == typedOther.consumeTapEvents && dart.equals(this.fillColor, typedOther.fillColor) && this.geodesic == typedOther.geodesic && dart.test(collections.listEquals(location.LatLng, this.points, typedOther.points)) && dart.test((C[16] || CT.C16).equals(this.holes, typedOther.holes)) && this.visible == typedOther.visible && dart.equals(this.strokeColor, typedOther.strokeColor) && this.strokeWidth == typedOther.strokeWidth && this.zIndex == typedOther.zIndex;
    }
    get hashCode() {
      return dart.hashCode(this.polygonId);
    }
    [_pointsToJson$]() {
      let result = T.JSArrayOfObject().of([]);
      for (let point of this.points) {
        result[$add](point.toJson());
      }
      return result;
    }
    [_holesToJson]() {
      let result = T.JSArrayOfListOfObject().of([]);
      for (let hole of this.holes) {
        let jsonHole = T.JSArrayOfObject().of([]);
        for (let point of hole) {
          jsonHole[$add](point.toJson());
        }
        result[$add](jsonHole);
      }
      return result;
    }
  };
  (polygon$.Polygon.new = function(opts) {
    let polygonId = opts && 'polygonId' in opts ? opts.polygonId : null;
    if (polygonId == null) dart.nullFailed(I[14], 26, 19, "polygonId");
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    if (consumeTapEvents == null) dart.nullFailed(I[14], 27, 10, "consumeTapEvents");
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : C[9] || CT.C9;
    if (fillColor == null) dart.nullFailed(I[14], 28, 10, "fillColor");
    let geodesic = opts && 'geodesic' in opts ? opts.geodesic : false;
    if (geodesic == null) dart.nullFailed(I[14], 29, 10, "geodesic");
    let points = opts && 'points' in opts ? opts.points : C[13] || CT.C13;
    if (points == null) dart.nullFailed(I[14], 30, 10, "points");
    let holes = opts && 'holes' in opts ? opts.holes : C[15] || CT.C15;
    if (holes == null) dart.nullFailed(I[14], 31, 10, "holes");
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : C[9] || CT.C9;
    if (strokeColor == null) dart.nullFailed(I[14], 32, 10, "strokeColor");
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 10;
    if (strokeWidth == null) dart.nullFailed(I[14], 33, 10, "strokeWidth");
    let visible = opts && 'visible' in opts ? opts.visible : true;
    if (visible == null) dart.nullFailed(I[14], 34, 10, "visible");
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : 0;
    if (zIndex == null) dart.nullFailed(I[14], 35, 10, "zIndex");
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[polygonId$] = polygonId;
    this[consumeTapEvents$0] = consumeTapEvents;
    this[fillColor$] = fillColor;
    this[geodesic$0] = geodesic;
    this[points$0] = points;
    this[holes$] = holes;
    this[strokeColor$] = strokeColor;
    this[strokeWidth$] = strokeWidth;
    this[visible$1] = visible;
    this[zIndex$1] = zIndex;
    this[onTap$0] = onTap;
    ;
  }).prototype = polygon$.Polygon.prototype;
  dart.addTypeTests(polygon$.Polygon);
  dart.addTypeCaches(polygon$.Polygon);
  polygon$.Polygon[dart.implements] = () => [maps_object$.MapsObject];
  dart.setMethodSignature(polygon$.Polygon, () => ({
    __proto__: dart.getMethods(polygon$.Polygon.__proto__),
    copyWith: dart.fnType(polygon$.Polygon, [], {consumeTapEventsParam: dart.nullable(core.bool), fillColorParam: dart.nullable(ui.Color), geodesicParam: dart.nullable(core.bool), holesParam: dart.nullable(core.List$(core.List$(location.LatLng))), onTapParam: dart.nullable(dart.fnType(dart.void, [])), pointsParam: dart.nullable(core.List$(location.LatLng)), strokeColorParam: dart.nullable(ui.Color), strokeWidthParam: dart.nullable(core.int), visibleParam: dart.nullable(core.bool), zIndexParam: dart.nullable(core.int)}, {}),
    clone: dart.fnType(polygon$.Polygon, []),
    toJson: dart.fnType(core.Object, []),
    [_pointsToJson$]: dart.fnType(core.Object, []),
    [_holesToJson]: dart.fnType(core.List$(core.List$(core.Object)), [])
  }));
  dart.setGetterSignature(polygon$.Polygon, () => ({
    __proto__: dart.getGetters(polygon$.Polygon.__proto__),
    mapsId: polygon$.PolygonId
  }));
  dart.setLibraryUri(polygon$.Polygon, I[15]);
  dart.setFieldSignature(polygon$.Polygon, () => ({
    __proto__: dart.getFields(polygon$.Polygon.__proto__),
    polygonId: dart.finalFieldType(polygon$.PolygonId),
    consumeTapEvents: dart.finalFieldType(core.bool),
    fillColor: dart.finalFieldType(ui.Color),
    geodesic: dart.finalFieldType(core.bool),
    points: dart.finalFieldType(core.List$(location.LatLng)),
    holes: dart.finalFieldType(core.List$(core.List$(location.LatLng))),
    visible: dart.finalFieldType(core.bool),
    strokeColor: dart.finalFieldType(ui.Color),
    strokeWidth: dart.finalFieldType(core.int),
    zIndex: dart.finalFieldType(core.int),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  dart.defineExtensionMethods(polygon$.Polygon, ['_equals']);
  dart.defineExtensionAccessors(polygon$.Polygon, ['hashCode']);
  polygon$.PolygonId = class PolygonId extends maps_object$.MapsObjectId$(polygon$.Polygon) {};
  (polygon$.PolygonId.new = function(value) {
    if (value == null) dart.nullFailed(I[14], 18, 26, "value");
    polygon$.PolygonId.__proto__.new.call(this, value);
    ;
  }).prototype = polygon$.PolygonId.prototype;
  dart.addTypeTests(polygon$.PolygonId);
  dart.addTypeCaches(polygon$.PolygonId);
  dart.setLibraryUri(polygon$.PolygonId, I[15]);
  polygon_updates.PolygonUpdates = class PolygonUpdates extends maps_object_updates.MapsObjectUpdates$(polygon$.Polygon) {
    get polygonsToAdd() {
      return this.objectsToAdd;
    }
    get polygonIdsToRemove() {
      return this.objectIdsToRemove.cast(polygon$.PolygonId);
    }
    get polygonsToChange() {
      return this.objectsToChange;
    }
  };
  (polygon_updates.PolygonUpdates.from = function(previous, current) {
    if (previous == null) dart.nullFailed(I[16], 13, 36, "previous");
    if (current == null) dart.nullFailed(I[16], 13, 59, "current");
    polygon_updates.PolygonUpdates.__proto__.from.call(this, previous, current, {objectName: "polygon"});
    ;
  }).prototype = polygon_updates.PolygonUpdates.prototype;
  dart.addTypeTests(polygon_updates.PolygonUpdates);
  dart.addTypeCaches(polygon_updates.PolygonUpdates);
  dart.setGetterSignature(polygon_updates.PolygonUpdates, () => ({
    __proto__: dart.getGetters(polygon_updates.PolygonUpdates.__proto__),
    polygonsToAdd: core.Set$(polygon$.Polygon),
    polygonIdsToRemove: core.Set$(polygon$.PolygonId),
    polygonsToChange: core.Set$(polygon$.Polygon)
  }));
  dart.setLibraryUri(polygon_updates.PolygonUpdates, I[17]);
  var title$ = dart.privateName(marker$, "InfoWindow.title");
  var snippet$ = dart.privateName(marker$, "InfoWindow.snippet");
  var anchor$ = dart.privateName(marker$, "InfoWindow.anchor");
  var onTap$1 = dart.privateName(marker$, "InfoWindow.onTap");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _toJson = dart.privateName(marker$, "_toJson");
  marker$.InfoWindow = class InfoWindow extends core.Object {
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get snippet() {
      return this[snippet$];
    }
    set snippet(value) {
      super.snippet = value;
    }
    get anchor() {
      return this[anchor$];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get onTap() {
      return this[onTap$1];
    }
    set onTap(value) {
      super.onTap = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1;
      let titleParam = opts && 'titleParam' in opts ? opts.titleParam : null;
      let snippetParam = opts && 'snippetParam' in opts ? opts.snippetParam : null;
      let anchorParam = opts && 'anchorParam' in opts ? opts.anchorParam : null;
      let onTapParam = opts && 'onTapParam' in opts ? opts.onTapParam : null;
      return new marker$.InfoWindow.new({title: (t0 = titleParam, t0 == null ? this.title : t0), snippet: (t0$ = snippetParam, t0$ == null ? this.snippet : t0$), anchor: (t0$0 = anchorParam, t0$0 == null ? this.anchor : t0$0), onTap: (t0$1 = onTapParam, t0$1 == null ? this.onTap : t0$1)});
    }
    [_toJson]() {
      let json = new (T.IdentityMapOfString$Object()).new();
      function addIfPresent(fieldName, value) {
        if (fieldName == null) dart.nullFailed(I[18], 69, 30, "fieldName");
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringAndObjectNTovoid());
      addIfPresent("title", this.title);
      addIfPresent("snippet", this.snippet);
      addIfPresent("anchor", marker$._offsetToJson(this.anchor));
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = marker$.InfoWindow.as(other);
      return this.title == typedOther.title && this.snippet == typedOther.snippet && dart.equals(this.anchor, typedOther.anchor);
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.title), this.snippet, this.anchor);
    }
    toString() {
      return "InfoWindow{title: " + dart.str(this.title) + ", snippet: " + dart.str(this.snippet) + ", anchor: " + dart.str(this.anchor) + "}";
    }
  };
  (marker$.InfoWindow.new = function(opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let snippet = opts && 'snippet' in opts ? opts.snippet : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : C[18] || CT.C18;
    if (anchor == null) dart.nullFailed(I[18], 22, 10, "anchor");
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[title$] = title;
    this[snippet$] = snippet;
    this[anchor$] = anchor;
    this[onTap$1] = onTap;
    ;
  }).prototype = marker$.InfoWindow.prototype;
  dart.addTypeTests(marker$.InfoWindow);
  dart.addTypeCaches(marker$.InfoWindow);
  dart.setMethodSignature(marker$.InfoWindow, () => ({
    __proto__: dart.getMethods(marker$.InfoWindow.__proto__),
    copyWith: dart.fnType(marker$.InfoWindow, [], {anchorParam: dart.nullable(ui.Offset), onTapParam: dart.nullable(dart.fnType(dart.void, [])), snippetParam: dart.nullable(core.String), titleParam: dart.nullable(core.String)}, {}),
    [_toJson]: dart.fnType(core.Object, [])
  }));
  dart.setLibraryUri(marker$.InfoWindow, I[19]);
  dart.setFieldSignature(marker$.InfoWindow, () => ({
    __proto__: dart.getFields(marker$.InfoWindow.__proto__),
    title: dart.finalFieldType(dart.nullable(core.String)),
    snippet: dart.finalFieldType(dart.nullable(core.String)),
    anchor: dart.finalFieldType(ui.Offset),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  dart.defineExtensionMethods(marker$.InfoWindow, ['_equals', 'toString']);
  dart.defineExtensionAccessors(marker$.InfoWindow, ['hashCode']);
  dart.defineLazy(marker$.InfoWindow, {
    /*marker$.InfoWindow.noText*/get noText() {
      return C[19] || CT.C19;
    }
  }, false);
  var markerId$ = dart.privateName(marker$, "Marker.markerId");
  var alpha$ = dart.privateName(marker$, "Marker.alpha");
  var anchor$0 = dart.privateName(marker$, "Marker.anchor");
  var consumeTapEvents$1 = dart.privateName(marker$, "Marker.consumeTapEvents");
  var draggable$ = dart.privateName(marker$, "Marker.draggable");
  var flat$ = dart.privateName(marker$, "Marker.flat");
  var icon$ = dart.privateName(marker$, "Marker.icon");
  var infoWindow$ = dart.privateName(marker$, "Marker.infoWindow");
  var position$ = dart.privateName(marker$, "Marker.position");
  var rotation$ = dart.privateName(marker$, "Marker.rotation");
  var visible$2 = dart.privateName(marker$, "Marker.visible");
  var zIndex$2 = dart.privateName(marker$, "Marker.zIndex");
  var onTap$2 = dart.privateName(marker$, "Marker.onTap");
  var onDragEnd$ = dart.privateName(marker$, "Marker.onDragEnd");
  var BitmapDescriptor__json = dart.privateName(bitmap, "BitmapDescriptor._json");
  var LatLng_longitude = dart.privateName(location, "LatLng.longitude");
  var LatLng_latitude = dart.privateName(location, "LatLng.latitude");
  marker$.Marker = class Marker extends core.Object {
    get markerId() {
      return this[markerId$];
    }
    set markerId(value) {
      super.markerId = value;
    }
    get alpha() {
      return this[alpha$];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get anchor() {
      return this[anchor$0];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get consumeTapEvents() {
      return this[consumeTapEvents$1];
    }
    set consumeTapEvents(value) {
      super.consumeTapEvents = value;
    }
    get draggable() {
      return this[draggable$];
    }
    set draggable(value) {
      super.draggable = value;
    }
    get flat() {
      return this[flat$];
    }
    set flat(value) {
      super.flat = value;
    }
    get icon() {
      return this[icon$];
    }
    set icon(value) {
      super.icon = value;
    }
    get infoWindow() {
      return this[infoWindow$];
    }
    set infoWindow(value) {
      super.infoWindow = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get rotation() {
      return this[rotation$];
    }
    set rotation(value) {
      super.rotation = value;
    }
    get visible() {
      return this[visible$2];
    }
    set visible(value) {
      super.visible = value;
    }
    get zIndex() {
      return this[zIndex$2];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get onTap() {
      return this[onTap$2];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get onDragEnd() {
      return this[onDragEnd$];
    }
    set onDragEnd(value) {
      super.onDragEnd = value;
    }
    get mapsId() {
      return this.markerId;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10;
      let alphaParam = opts && 'alphaParam' in opts ? opts.alphaParam : null;
      let anchorParam = opts && 'anchorParam' in opts ? opts.anchorParam : null;
      let consumeTapEventsParam = opts && 'consumeTapEventsParam' in opts ? opts.consumeTapEventsParam : null;
      let draggableParam = opts && 'draggableParam' in opts ? opts.draggableParam : null;
      let flatParam = opts && 'flatParam' in opts ? opts.flatParam : null;
      let iconParam = opts && 'iconParam' in opts ? opts.iconParam : null;
      let infoWindowParam = opts && 'infoWindowParam' in opts ? opts.infoWindowParam : null;
      let positionParam = opts && 'positionParam' in opts ? opts.positionParam : null;
      let rotationParam = opts && 'rotationParam' in opts ? opts.rotationParam : null;
      let visibleParam = opts && 'visibleParam' in opts ? opts.visibleParam : null;
      let zIndexParam = opts && 'zIndexParam' in opts ? opts.zIndexParam : null;
      let onTapParam = opts && 'onTapParam' in opts ? opts.onTapParam : null;
      let onDragEndParam = opts && 'onDragEndParam' in opts ? opts.onDragEndParam : null;
      return new marker$.Marker.new({markerId: this.markerId, alpha: (t0 = alphaParam, t0 == null ? this.alpha : t0), anchor: (t0$ = anchorParam, t0$ == null ? this.anchor : t0$), consumeTapEvents: (t0$0 = consumeTapEventsParam, t0$0 == null ? this.consumeTapEvents : t0$0), draggable: (t0$1 = draggableParam, t0$1 == null ? this.draggable : t0$1), flat: (t0$2 = flatParam, t0$2 == null ? this.flat : t0$2), icon: (t0$3 = iconParam, t0$3 == null ? this.icon : t0$3), infoWindow: (t0$4 = infoWindowParam, t0$4 == null ? this.infoWindow : t0$4), position: (t0$5 = positionParam, t0$5 == null ? this.position : t0$5), rotation: (t0$6 = rotationParam, t0$6 == null ? this.rotation : t0$6), visible: (t0$7 = visibleParam, t0$7 == null ? this.visible : t0$7), zIndex: (t0$8 = zIndexParam, t0$8 == null ? this.zIndex : t0$8), onTap: (t0$9 = onTapParam, t0$9 == null ? this.onTap : t0$9), onDragEnd: (t0$10 = onDragEndParam, t0$10 == null ? this.onDragEnd : t0$10)});
    }
    clone() {
      return this.copyWith();
    }
    toJson() {
      let json = new (T.IdentityMapOfString$Object()).new();
      function addIfPresent(fieldName, value) {
        if (fieldName == null) dart.nullFailed(I[18], 255, 30, "fieldName");
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringAndObjectNTovoid());
      addIfPresent("markerId", this.markerId.value);
      addIfPresent("alpha", this.alpha);
      addIfPresent("anchor", marker$._offsetToJson(this.anchor));
      addIfPresent("consumeTapEvents", this.consumeTapEvents);
      addIfPresent("draggable", this.draggable);
      addIfPresent("flat", this.flat);
      addIfPresent("icon", this.icon.toJson());
      addIfPresent("infoWindow", this.infoWindow[_toJson]());
      addIfPresent("position", this.position.toJson());
      addIfPresent("rotation", this.rotation);
      addIfPresent("visible", this.visible);
      addIfPresent("zIndex", this.zIndex);
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = marker$.Marker.as(other);
      return dart.equals(this.markerId, typedOther.markerId) && this.alpha == typedOther.alpha && dart.equals(this.anchor, typedOther.anchor) && this.consumeTapEvents == typedOther.consumeTapEvents && this.draggable == typedOther.draggable && this.flat == typedOther.flat && dart.equals(this.icon, typedOther.icon) && dart.equals(this.infoWindow, typedOther.infoWindow) && dart.equals(this.position, typedOther.position) && this.rotation == typedOther.rotation && this.visible == typedOther.visible && this.zIndex == typedOther.zIndex;
    }
    get hashCode() {
      return dart.hashCode(this.markerId);
    }
    toString() {
      return "Marker{markerId: " + dart.str(this.markerId) + ", alpha: " + dart.str(this.alpha) + ", anchor: " + dart.str(this.anchor) + ", " + "consumeTapEvents: " + dart.str(this.consumeTapEvents) + ", draggable: " + dart.str(this.draggable) + ", flat: " + dart.str(this.flat) + ", " + "icon: " + dart.str(this.icon) + ", infoWindow: " + dart.str(this.infoWindow) + ", position: " + dart.str(this.position) + ", rotation: " + dart.str(this.rotation) + ", " + "visible: " + dart.str(this.visible) + ", zIndex: " + dart.str(this.zIndex) + ", onTap: " + dart.str(this.onTap) + "}";
    }
  };
  (marker$.Marker.new = function(opts) {
    let markerId = opts && 'markerId' in opts ? opts.markerId : null;
    if (markerId == null) dart.nullFailed(I[18], 137, 19, "markerId");
    let alpha = opts && 'alpha' in opts ? opts.alpha : 1;
    if (alpha == null) dart.nullFailed(I[18], 138, 10, "alpha");
    let anchor = opts && 'anchor' in opts ? opts.anchor : C[20] || CT.C20;
    if (anchor == null) dart.nullFailed(I[18], 139, 10, "anchor");
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    if (consumeTapEvents == null) dart.nullFailed(I[18], 140, 10, "consumeTapEvents");
    let draggable = opts && 'draggable' in opts ? opts.draggable : false;
    if (draggable == null) dart.nullFailed(I[18], 141, 10, "draggable");
    let flat = opts && 'flat' in opts ? opts.flat : false;
    if (flat == null) dart.nullFailed(I[18], 142, 10, "flat");
    let icon = opts && 'icon' in opts ? opts.icon : C[21] || CT.C21;
    if (icon == null) dart.nullFailed(I[18], 143, 10, "icon");
    let infoWindow = opts && 'infoWindow' in opts ? opts.infoWindow : C[19] || CT.C19;
    if (infoWindow == null) dart.nullFailed(I[18], 144, 10, "infoWindow");
    let position = opts && 'position' in opts ? opts.position : C[23] || CT.C23;
    if (position == null) dart.nullFailed(I[18], 145, 10, "position");
    let rotation = opts && 'rotation' in opts ? opts.rotation : 0;
    if (rotation == null) dart.nullFailed(I[18], 146, 10, "rotation");
    let visible = opts && 'visible' in opts ? opts.visible : true;
    if (visible == null) dart.nullFailed(I[18], 147, 10, "visible");
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : 0;
    if (zIndex == null) dart.nullFailed(I[18], 148, 10, "zIndex");
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onDragEnd = opts && 'onDragEnd' in opts ? opts.onDragEnd : null;
    this[markerId$] = markerId;
    this[alpha$] = alpha;
    this[anchor$0] = anchor;
    this[consumeTapEvents$1] = consumeTapEvents;
    this[draggable$] = draggable;
    this[flat$] = flat;
    this[icon$] = icon;
    this[infoWindow$] = infoWindow;
    this[position$] = position;
    this[rotation$] = rotation;
    this[visible$2] = visible;
    this[zIndex$2] = zIndex;
    this[onTap$2] = onTap;
    this[onDragEnd$] = onDragEnd;
    if (!(alpha == null || 0.0 <= dart.notNull(alpha) && dart.notNull(alpha) <= 1.0)) dart.assertFailed(null, I[18], 151, 15, "alpha == null || (0.0 <= alpha && alpha <= 1.0)");
    ;
  }).prototype = marker$.Marker.prototype;
  dart.addTypeTests(marker$.Marker);
  dart.addTypeCaches(marker$.Marker);
  marker$.Marker[dart.implements] = () => [maps_object$.MapsObject];
  dart.setMethodSignature(marker$.Marker, () => ({
    __proto__: dart.getMethods(marker$.Marker.__proto__),
    copyWith: dart.fnType(marker$.Marker, [], {alphaParam: dart.nullable(core.double), anchorParam: dart.nullable(ui.Offset), consumeTapEventsParam: dart.nullable(core.bool), draggableParam: dart.nullable(core.bool), flatParam: dart.nullable(core.bool), iconParam: dart.nullable(bitmap.BitmapDescriptor), infoWindowParam: dart.nullable(marker$.InfoWindow), onDragEndParam: dart.nullable(dart.fnType(dart.void, [location.LatLng])), onTapParam: dart.nullable(dart.fnType(dart.void, [])), positionParam: dart.nullable(location.LatLng), rotationParam: dart.nullable(core.double), visibleParam: dart.nullable(core.bool), zIndexParam: dart.nullable(core.double)}, {}),
    clone: dart.fnType(marker$.Marker, []),
    toJson: dart.fnType(core.Object, [])
  }));
  dart.setGetterSignature(marker$.Marker, () => ({
    __proto__: dart.getGetters(marker$.Marker.__proto__),
    mapsId: marker$.MarkerId
  }));
  dart.setLibraryUri(marker$.Marker, I[19]);
  dart.setFieldSignature(marker$.Marker, () => ({
    __proto__: dart.getFields(marker$.Marker.__proto__),
    markerId: dart.finalFieldType(marker$.MarkerId),
    alpha: dart.finalFieldType(core.double),
    anchor: dart.finalFieldType(ui.Offset),
    consumeTapEvents: dart.finalFieldType(core.bool),
    draggable: dart.finalFieldType(core.bool),
    flat: dart.finalFieldType(core.bool),
    icon: dart.finalFieldType(bitmap.BitmapDescriptor),
    infoWindow: dart.finalFieldType(marker$.InfoWindow),
    position: dart.finalFieldType(location.LatLng),
    rotation: dart.finalFieldType(core.double),
    visible: dart.finalFieldType(core.bool),
    zIndex: dart.finalFieldType(core.double),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDragEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [location.LatLng])))
  }));
  dart.defineExtensionMethods(marker$.Marker, ['_equals', 'toString']);
  dart.defineExtensionAccessors(marker$.Marker, ['hashCode']);
  marker$.MarkerId = class MarkerId extends maps_object$.MapsObjectId$(marker$.Marker) {};
  (marker$.MarkerId.new = function(value) {
    if (value == null) dart.nullFailed(I[18], 107, 25, "value");
    marker$.MarkerId.__proto__.new.call(this, value);
    ;
  }).prototype = marker$.MarkerId.prototype;
  dart.addTypeTests(marker$.MarkerId);
  dart.addTypeCaches(marker$.MarkerId);
  dart.setLibraryUri(marker$.MarkerId, I[19]);
  marker$._offsetToJson = function _offsetToJson(offset) {
    if (offset == null) dart.nullFailed(I[18], 12, 29, "offset");
    return T.JSArrayOfObject().of([offset.dx, offset.dy]);
  };
  marker_updates.MarkerUpdates = class MarkerUpdates extends maps_object_updates.MapsObjectUpdates$(marker$.Marker) {
    get markersToAdd() {
      return this.objectsToAdd;
    }
    get markerIdsToRemove() {
      return this.objectIdsToRemove.cast(marker$.MarkerId);
    }
    get markersToChange() {
      return this.objectsToChange;
    }
  };
  (marker_updates.MarkerUpdates.from = function(previous, current) {
    if (previous == null) dart.nullFailed(I[20], 13, 34, "previous");
    if (current == null) dart.nullFailed(I[20], 13, 56, "current");
    marker_updates.MarkerUpdates.__proto__.from.call(this, previous, current, {objectName: "marker"});
    ;
  }).prototype = marker_updates.MarkerUpdates.prototype;
  dart.addTypeTests(marker_updates.MarkerUpdates);
  dart.addTypeCaches(marker_updates.MarkerUpdates);
  dart.setGetterSignature(marker_updates.MarkerUpdates, () => ({
    __proto__: dart.getGetters(marker_updates.MarkerUpdates.__proto__),
    markersToAdd: core.Set$(marker$.Marker),
    markerIdsToRemove: core.Set$(marker$.MarkerId),
    markersToChange: core.Set$(marker$.Marker)
  }));
  dart.setLibraryUri(marker_updates.MarkerUpdates, I[21]);
  var circleId$ = dart.privateName(circle$, "Circle.circleId");
  var consumeTapEvents$2 = dart.privateName(circle$, "Circle.consumeTapEvents");
  var fillColor$0 = dart.privateName(circle$, "Circle.fillColor");
  var center$ = dart.privateName(circle$, "Circle.center");
  var radius$ = dart.privateName(circle$, "Circle.radius");
  var strokeColor$0 = dart.privateName(circle$, "Circle.strokeColor");
  var strokeWidth$0 = dart.privateName(circle$, "Circle.strokeWidth");
  var visible$3 = dart.privateName(circle$, "Circle.visible");
  var zIndex$3 = dart.privateName(circle$, "Circle.zIndex");
  var onTap$3 = dart.privateName(circle$, "Circle.onTap");
  circle$.Circle = class Circle extends core.Object {
    get circleId() {
      return this[circleId$];
    }
    set circleId(value) {
      super.circleId = value;
    }
    get consumeTapEvents() {
      return this[consumeTapEvents$2];
    }
    set consumeTapEvents(value) {
      super.consumeTapEvents = value;
    }
    get fillColor() {
      return this[fillColor$0];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get strokeColor() {
      return this[strokeColor$0];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$0];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get visible() {
      return this[visible$3];
    }
    set visible(value) {
      super.visible = value;
    }
    get zIndex() {
      return this[zIndex$3];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get onTap() {
      return this[onTap$3];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get mapsId() {
      return this.circleId;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6;
      let consumeTapEventsParam = opts && 'consumeTapEventsParam' in opts ? opts.consumeTapEventsParam : null;
      let fillColorParam = opts && 'fillColorParam' in opts ? opts.fillColorParam : null;
      let centerParam = opts && 'centerParam' in opts ? opts.centerParam : null;
      let radiusParam = opts && 'radiusParam' in opts ? opts.radiusParam : null;
      let strokeColorParam = opts && 'strokeColorParam' in opts ? opts.strokeColorParam : null;
      let strokeWidthParam = opts && 'strokeWidthParam' in opts ? opts.strokeWidthParam : null;
      let visibleParam = opts && 'visibleParam' in opts ? opts.visibleParam : null;
      let zIndexParam = opts && 'zIndexParam' in opts ? opts.zIndexParam : null;
      let onTapParam = opts && 'onTapParam' in opts ? opts.onTapParam : null;
      return new circle$.Circle.new({circleId: this.circleId, consumeTapEvents: (t0 = consumeTapEventsParam, t0 == null ? this.consumeTapEvents : t0), fillColor: (t0$ = fillColorParam, t0$ == null ? this.fillColor : t0$), center: (t0$0 = centerParam, t0$0 == null ? this.center : t0$0), radius: (t0$1 = radiusParam, t0$1 == null ? this.radius : t0$1), strokeColor: (t0$2 = strokeColorParam, t0$2 == null ? this.strokeColor : t0$2), strokeWidth: (t0$3 = strokeWidthParam, t0$3 == null ? this.strokeWidth : t0$3), visible: (t0$4 = visibleParam, t0$4 == null ? this.visible : t0$4), zIndex: (t0$5 = zIndexParam, t0$5 == null ? this.zIndex : t0$5), onTap: (t0$6 = onTapParam, t0$6 == null ? this.onTap : t0$6)});
    }
    clone() {
      return this.copyWith();
    }
    toJson() {
      let json = new (T.IdentityMapOfString$Object()).new();
      function addIfPresent(fieldName, value) {
        if (fieldName == null) dart.nullFailed(I[22], 114, 30, "fieldName");
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringAndObjectNTovoid());
      addIfPresent("circleId", this.circleId.value);
      addIfPresent("consumeTapEvents", this.consumeTapEvents);
      addIfPresent("fillColor", this.fillColor.value);
      addIfPresent("center", this.center.toJson());
      addIfPresent("radius", this.radius);
      addIfPresent("strokeColor", this.strokeColor.value);
      addIfPresent("strokeWidth", this.strokeWidth);
      addIfPresent("visible", this.visible);
      addIfPresent("zIndex", this.zIndex);
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = circle$.Circle.as(other);
      return dart.equals(this.circleId, typedOther.circleId) && this.consumeTapEvents == typedOther.consumeTapEvents && dart.equals(this.fillColor, typedOther.fillColor) && dart.equals(this.center, typedOther.center) && this.radius == typedOther.radius && dart.equals(this.strokeColor, typedOther.strokeColor) && this.strokeWidth == typedOther.strokeWidth && this.visible == typedOther.visible && this.zIndex == typedOther.zIndex;
    }
    get hashCode() {
      return dart.hashCode(this.circleId);
    }
  };
  (circle$.Circle.new = function(opts) {
    let circleId = opts && 'circleId' in opts ? opts.circleId : null;
    if (circleId == null) dart.nullFailed(I[22], 25, 19, "circleId");
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    if (consumeTapEvents == null) dart.nullFailed(I[22], 26, 10, "consumeTapEvents");
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : C[24] || CT.C24;
    if (fillColor == null) dart.nullFailed(I[22], 27, 10, "fillColor");
    let center = opts && 'center' in opts ? opts.center : C[23] || CT.C23;
    if (center == null) dart.nullFailed(I[22], 28, 10, "center");
    let radius = opts && 'radius' in opts ? opts.radius : 0;
    if (radius == null) dart.nullFailed(I[22], 29, 10, "radius");
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : C[9] || CT.C9;
    if (strokeColor == null) dart.nullFailed(I[22], 30, 10, "strokeColor");
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 10;
    if (strokeWidth == null) dart.nullFailed(I[22], 31, 10, "strokeWidth");
    let visible = opts && 'visible' in opts ? opts.visible : true;
    if (visible == null) dart.nullFailed(I[22], 32, 10, "visible");
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : 0;
    if (zIndex == null) dart.nullFailed(I[22], 33, 10, "zIndex");
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[circleId$] = circleId;
    this[consumeTapEvents$2] = consumeTapEvents;
    this[fillColor$0] = fillColor;
    this[center$] = center;
    this[radius$] = radius;
    this[strokeColor$0] = strokeColor;
    this[strokeWidth$0] = strokeWidth;
    this[visible$3] = visible;
    this[zIndex$3] = zIndex;
    this[onTap$3] = onTap;
    ;
  }).prototype = circle$.Circle.prototype;
  dart.addTypeTests(circle$.Circle);
  dart.addTypeCaches(circle$.Circle);
  circle$.Circle[dart.implements] = () => [maps_object$.MapsObject$(circle$.Circle)];
  dart.setMethodSignature(circle$.Circle, () => ({
    __proto__: dart.getMethods(circle$.Circle.__proto__),
    copyWith: dart.fnType(circle$.Circle, [], {centerParam: dart.nullable(location.LatLng), consumeTapEventsParam: dart.nullable(core.bool), fillColorParam: dart.nullable(ui.Color), onTapParam: dart.nullable(dart.fnType(dart.void, [])), radiusParam: dart.nullable(core.double), strokeColorParam: dart.nullable(ui.Color), strokeWidthParam: dart.nullable(core.int), visibleParam: dart.nullable(core.bool), zIndexParam: dart.nullable(core.int)}, {}),
    clone: dart.fnType(circle$.Circle, []),
    toJson: dart.fnType(core.Object, [])
  }));
  dart.setGetterSignature(circle$.Circle, () => ({
    __proto__: dart.getGetters(circle$.Circle.__proto__),
    mapsId: circle$.CircleId
  }));
  dart.setLibraryUri(circle$.Circle, I[23]);
  dart.setFieldSignature(circle$.Circle, () => ({
    __proto__: dart.getFields(circle$.Circle.__proto__),
    circleId: dart.finalFieldType(circle$.CircleId),
    consumeTapEvents: dart.finalFieldType(core.bool),
    fillColor: dart.finalFieldType(ui.Color),
    center: dart.finalFieldType(location.LatLng),
    radius: dart.finalFieldType(core.double),
    strokeColor: dart.finalFieldType(ui.Color),
    strokeWidth: dart.finalFieldType(core.int),
    visible: dart.finalFieldType(core.bool),
    zIndex: dart.finalFieldType(core.int),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  dart.defineExtensionMethods(circle$.Circle, ['_equals']);
  dart.defineExtensionAccessors(circle$.Circle, ['hashCode']);
  circle$.CircleId = class CircleId extends maps_object$.MapsObjectId$(circle$.Circle) {};
  (circle$.CircleId.new = function(value) {
    if (value == null) dart.nullFailed(I[22], 17, 25, "value");
    circle$.CircleId.__proto__.new.call(this, value);
    ;
  }).prototype = circle$.CircleId.prototype;
  dart.addTypeTests(circle$.CircleId);
  dart.addTypeCaches(circle$.CircleId);
  dart.setLibraryUri(circle$.CircleId, I[23]);
  circle_updates.CircleUpdates = class CircleUpdates extends maps_object_updates.MapsObjectUpdates$(circle$.Circle) {
    get circlesToAdd() {
      return this.objectsToAdd;
    }
    get circleIdsToRemove() {
      return this.objectIdsToRemove.cast(circle$.CircleId);
    }
    get circlesToChange() {
      return this.objectsToChange;
    }
  };
  (circle_updates.CircleUpdates.from = function(previous, current) {
    if (previous == null) dart.nullFailed(I[24], 13, 34, "previous");
    if (current == null) dart.nullFailed(I[24], 13, 56, "current");
    circle_updates.CircleUpdates.__proto__.from.call(this, previous, current, {objectName: "circle"});
    ;
  }).prototype = circle_updates.CircleUpdates.prototype;
  dart.addTypeTests(circle_updates.CircleUpdates);
  dart.addTypeCaches(circle_updates.CircleUpdates);
  dart.setGetterSignature(circle_updates.CircleUpdates, () => ({
    __proto__: dart.getGetters(circle_updates.CircleUpdates.__proto__),
    circlesToAdd: core.Set$(circle$.Circle),
    circleIdsToRemove: core.Set$(circle$.CircleId),
    circlesToChange: core.Set$(circle$.Circle)
  }));
  dart.setLibraryUri(circle_updates.CircleUpdates, I[25]);
  var _json = dart.privateName(cap, "_json");
  const _json$ = Cap__json;
  cap.Cap = class Cap extends core.Object {
    get [_json]() {
      return this[_json$];
    }
    set [_json](value) {
      super[_json] = value;
    }
    static customCapFromBitmap(bitmapDescriptor, opts) {
      if (bitmapDescriptor == null) dart.nullFailed(I[26], 43, 22, "bitmapDescriptor");
      let refWidth = opts && 'refWidth' in opts ? opts.refWidth : 10;
      if (refWidth == null) dart.nullFailed(I[26], 44, 12, "refWidth");
      if (!(bitmapDescriptor != null)) dart.assertFailed(null, I[26], 46, 12, "bitmapDescriptor != null");
      if (!(dart.notNull(refWidth) > 0.0)) dart.assertFailed(null, I[26], 47, 12, "refWidth > 0.0");
      return new cap.Cap.__(T.JSArrayOfObject().of(["customCap", bitmapDescriptor.toJson(), refWidth]));
    }
    toJson() {
      return this[_json];
    }
  };
  (cap.Cap.__ = function(_json) {
    if (_json == null) dart.nullFailed(I[26], 12, 20, "_json");
    this[_json$] = _json;
    ;
  }).prototype = cap.Cap.prototype;
  dart.addTypeTests(cap.Cap);
  dart.addTypeCaches(cap.Cap);
  dart.setMethodSignature(cap.Cap, () => ({
    __proto__: dart.getMethods(cap.Cap.__proto__),
    toJson: dart.fnType(core.Object, [])
  }));
  dart.setLibraryUri(cap.Cap, I[27]);
  dart.setFieldSignature(cap.Cap, () => ({
    __proto__: dart.getFields(cap.Cap.__proto__),
    [_json]: dart.finalFieldType(core.Object)
  }));
  dart.defineLazy(cap.Cap, {
    /*cap.Cap.buttCap*/get buttCap() {
      return C[10] || CT.C10;
    },
    /*cap.Cap.roundCap*/get roundCap() {
      return C[25] || CT.C25;
    },
    /*cap.Cap.squareCap*/get squareCap() {
      return C[27] || CT.C27;
    }
  }, false);
  var bearing$ = dart.privateName(camera, "CameraPosition.bearing");
  var target$ = dart.privateName(camera, "CameraPosition.target");
  var tilt$ = dart.privateName(camera, "CameraPosition.tilt");
  var zoom$ = dart.privateName(camera, "CameraPosition.zoom");
  camera.CameraPosition = class CameraPosition extends core.Object {
    get bearing() {
      return this[bearing$];
    }
    set bearing(value) {
      super.bearing = value;
    }
    get target() {
      return this[target$];
    }
    set target(value) {
      super.target = value;
    }
    get tilt() {
      return this[tilt$];
    }
    set tilt(value) {
      super.tilt = value;
    }
    get zoom() {
      return this[zoom$];
    }
    set zoom(value) {
      super.zoom = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$Object()).from(["bearing", this.bearing, "target", this.target.toJson(), "tilt", this.tilt, "zoom", this.zoom]);
    }
    static fromMap(json) {
      if (json == null || !core.Map.is(json)) {
        return null;
      }
      let target = location.LatLng.fromJson(json[$_get]("target"));
      if (target == null) {
        return null;
      }
      return new camera.CameraPosition.new({bearing: core.double.as(json[$_get]("bearing")), target: target, tilt: core.double.as(json[$_get]("tilt")), zoom: core.double.as(json[$_get]("zoom"))});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = camera.CameraPosition.as(other);
      return this.bearing == typedOther.bearing && dart.equals(this.target, typedOther.target) && this.tilt == typedOther.tilt && this.zoom == typedOther.zoom;
    }
    get hashCode() {
      return ui.hashValues(this.bearing, this.target, this.tilt, this.zoom);
    }
    toString() {
      return "CameraPosition(bearing: " + dart.str(this.bearing) + ", target: " + dart.str(this.target) + ", tilt: " + dart.str(this.tilt) + ", zoom: " + dart.str(this.zoom) + ")";
    }
  };
  (camera.CameraPosition.new = function(opts) {
    let bearing = opts && 'bearing' in opts ? opts.bearing : 0;
    if (bearing == null) dart.nullFailed(I[28], 19, 10, "bearing");
    let target = opts && 'target' in opts ? opts.target : null;
    if (target == null) dart.nullFailed(I[28], 20, 19, "target");
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    if (tilt == null) dart.nullFailed(I[28], 21, 10, "tilt");
    let zoom = opts && 'zoom' in opts ? opts.zoom : 0;
    if (zoom == null) dart.nullFailed(I[28], 22, 10, "zoom");
    this[bearing$] = bearing;
    this[target$] = target;
    this[tilt$] = tilt;
    this[zoom$] = zoom;
    if (!(bearing != null)) dart.assertFailed(null, I[28], 23, 16, "bearing != null");
    if (!(target != null)) dart.assertFailed(null, I[28], 24, 16, "target != null");
    if (!(tilt != null)) dart.assertFailed(null, I[28], 25, 16, "tilt != null");
    if (!(zoom != null)) dart.assertFailed(null, I[28], 26, 16, "zoom != null");
    ;
  }).prototype = camera.CameraPosition.prototype;
  dart.addTypeTests(camera.CameraPosition);
  dart.addTypeCaches(camera.CameraPosition);
  dart.setMethodSignature(camera.CameraPosition, () => ({
    __proto__: dart.getMethods(camera.CameraPosition.__proto__),
    toMap: dart.fnType(core.Object, [])
  }));
  dart.setLibraryUri(camera.CameraPosition, I[29]);
  dart.setFieldSignature(camera.CameraPosition, () => ({
    __proto__: dart.getFields(camera.CameraPosition.__proto__),
    bearing: dart.finalFieldType(core.double),
    target: dart.finalFieldType(location.LatLng),
    tilt: dart.finalFieldType(core.double),
    zoom: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(camera.CameraPosition, ['_equals', 'toString']);
  dart.defineExtensionAccessors(camera.CameraPosition, ['hashCode']);
  var _json$0 = dart.privateName(camera, "CameraUpdate._json");
  var _json$1 = dart.privateName(camera, "_json");
  camera.CameraUpdate = class CameraUpdate extends core.Object {
    get [_json$1]() {
      return this[_json$0];
    }
    set [_json$1](value) {
      super[_json$1] = value;
    }
    static newCameraPosition(cameraPosition) {
      if (cameraPosition == null) dart.nullFailed(I[28], 115, 56, "cameraPosition");
      return new camera.CameraUpdate.__(T.JSArrayOfObject().of(["newCameraPosition", cameraPosition.toMap()]));
    }
    static newLatLng(latLng) {
      if (latLng == null) dart.nullFailed(I[28], 123, 40, "latLng");
      return new camera.CameraUpdate.__(T.JSArrayOfObject().of(["newLatLng", latLng.toJson()]));
    }
    static newLatLngBounds(bounds, padding) {
      if (bounds == null) dart.nullFailed(I[28], 131, 52, "bounds");
      if (padding == null) dart.nullFailed(I[28], 131, 67, "padding");
      return new camera.CameraUpdate.__(T.JSArrayOfObject().of(["newLatLngBounds", bounds.toJson(), padding]));
    }
    static newLatLngZoom(latLng, zoom) {
      if (latLng == null) dart.nullFailed(I[28], 141, 44, "latLng");
      if (zoom == null) dart.nullFailed(I[28], 141, 59, "zoom");
      return new camera.CameraUpdate.__(T.JSArrayOfObject().of(["newLatLngZoom", latLng.toJson(), zoom]));
    }
    static scrollBy(dx, dy) {
      if (dx == null) dart.nullFailed(I[28], 153, 39, "dx");
      if (dy == null) dart.nullFailed(I[28], 153, 50, "dy");
      return new camera.CameraUpdate.__(T.JSArrayOfObject().of(["scrollBy", dx, dy]));
    }
    static zoomBy(amount, focus = null) {
      if (amount == null) dart.nullFailed(I[28], 162, 37, "amount");
      if (focus == null) {
        return new camera.CameraUpdate.__(T.JSArrayOfObject().of(["zoomBy", amount]));
      } else {
        return new camera.CameraUpdate.__(T.JSArrayOfObject().of(["zoomBy", amount, T.JSArrayOfdouble().of([focus.dx, focus.dy])]));
      }
    }
    static zoomIn() {
      return C[29] || CT.C29;
    }
    static zoomOut() {
      return C[31] || CT.C31;
    }
    static zoomTo(zoom) {
      if (zoom == null) dart.nullFailed(I[28], 191, 37, "zoom");
      return new camera.CameraUpdate.__(T.JSArrayOfObject().of(["zoomTo", zoom]));
    }
    toJson() {
      return this[_json$1];
    }
  };
  (camera.CameraUpdate.__ = function(_json) {
    if (_json == null) dart.nullFailed(I[28], 112, 29, "_json");
    this[_json$0] = _json;
    ;
  }).prototype = camera.CameraUpdate.prototype;
  dart.addTypeTests(camera.CameraUpdate);
  dart.addTypeCaches(camera.CameraUpdate);
  dart.setMethodSignature(camera.CameraUpdate, () => ({
    __proto__: dart.getMethods(camera.CameraUpdate.__proto__),
    toJson: dart.fnType(core.Object, [])
  }));
  dart.setLibraryUri(camera.CameraUpdate, I[29]);
  dart.setFieldSignature(camera.CameraUpdate, () => ({
    __proto__: dart.getFields(camera.CameraUpdate.__proto__),
    [_json$1]: dart.finalFieldType(core.Object)
  }));
  var _callbacks = dart.privateName(callbacks, "_callbacks");
  const _is_ArgumentCallbacks_default = Symbol('_is_ArgumentCallbacks_default');
  callbacks.ArgumentCallbacks$ = dart.generic(T => {
    var TTovoid = () => (TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var JSArrayOfTTovoid = () => (JSArrayOfTTovoid = dart.constFn(_interceptors.JSArray$(TTovoid())))();
    var ListOfTTovoid = () => (ListOfTTovoid = dart.constFn(core.List$(TTovoid())))();
    class ArgumentCallbacks extends core.Object {
      call(argument) {
        T.as(argument);
        let length = this[_callbacks][$length];
        if (length === 1) {
          this[_callbacks][$_get](0)(argument);
        } else if (0 < dart.notNull(length)) {
          for (let callback of ListOfTTovoid().from(this[_callbacks])) {
            callback(argument);
          }
        }
      }
      add(callback) {
        if (callback == null) dart.nullFailed(I[30], 46, 32, "callback");
        if (!(callback != null)) dart.assertFailed(null, I[30], 47, 12, "callback != null");
        this[_callbacks][$add](callback);
      }
      remove(callback) {
        if (callback == null) dart.nullFailed(I[30], 54, 35, "callback");
        this[_callbacks][$remove](callback);
      }
      get isEmpty() {
        return this[_callbacks][$isEmpty];
      }
      get isNotEmpty() {
        return this[_callbacks][$isNotEmpty];
      }
    }
    (ArgumentCallbacks.new = function() {
      this[_callbacks] = JSArrayOfTTovoid().of([]);
      ;
    }).prototype = ArgumentCallbacks.prototype;
    dart.addTypeTests(ArgumentCallbacks);
    ArgumentCallbacks.prototype[_is_ArgumentCallbacks_default] = true;
    dart.addTypeCaches(ArgumentCallbacks);
    dart.setMethodSignature(ArgumentCallbacks, () => ({
      __proto__: dart.getMethods(ArgumentCallbacks.__proto__),
      call: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      add: dart.fnType(dart.void, [dart.fnType(dart.void, [T])]),
      remove: dart.fnType(dart.void, [dart.fnType(dart.void, [T])])
    }));
    dart.setGetterSignature(ArgumentCallbacks, () => ({
      __proto__: dart.getGetters(ArgumentCallbacks.__proto__),
      isEmpty: core.bool,
      isNotEmpty: core.bool
    }));
    dart.setLibraryUri(ArgumentCallbacks, I[31]);
    dart.setFieldSignature(ArgumentCallbacks, () => ({
      __proto__: dart.getFields(ArgumentCallbacks.__proto__),
      [_callbacks]: dart.finalFieldType(core.List$(dart.fnType(dart.void, [T])))
    }));
    return ArgumentCallbacks;
  });
  callbacks.ArgumentCallbacks = callbacks.ArgumentCallbacks$();
  dart.addTypeTests(callbacks.ArgumentCallbacks, _is_ArgumentCallbacks_default);
  dart.trackLibraries("packages/google_maps_flutter_platform_interface/src/types/utils/tile_overlay.dart", {
    "package:google_maps_flutter_platform_interface/src/types/utils/tile_overlay.dart": tile_overlay,
    "package:google_maps_flutter_platform_interface/src/types/utils/polyline.dart": polyline,
    "package:google_maps_flutter_platform_interface/src/types/utils/polygon.dart": polygon,
    "package:google_maps_flutter_platform_interface/src/types/utils/marker.dart": marker,
    "package:google_maps_flutter_platform_interface/src/types/utils/circle.dart": circle,
    "package:google_maps_flutter_platform_interface/src/types/ui.dart": ui$,
    "package:google_maps_flutter_platform_interface/src/types/tile_provider.dart": tile_provider,
    "package:google_maps_flutter_platform_interface/src/types/tile_overlay.dart": tile_overlay$,
    "package:google_maps_flutter_platform_interface/src/types/polyline.dart": polyline$,
    "package:google_maps_flutter_platform_interface/src/types/polyline_updates.dart": polyline_updates,
    "package:google_maps_flutter_platform_interface/src/types/polygon.dart": polygon$,
    "package:google_maps_flutter_platform_interface/src/types/polygon_updates.dart": polygon_updates,
    "package:google_maps_flutter_platform_interface/src/types/marker.dart": marker$,
    "package:google_maps_flutter_platform_interface/src/types/marker_updates.dart": marker_updates,
    "package:google_maps_flutter_platform_interface/src/types/circle.dart": circle$,
    "package:google_maps_flutter_platform_interface/src/types/circle_updates.dart": circle_updates,
    "package:google_maps_flutter_platform_interface/src/types/cap.dart": cap,
    "package:google_maps_flutter_platform_interface/src/types/camera.dart": camera,
    "package:google_maps_flutter_platform_interface/src/types/callbacks.dart": callbacks,
    "package:google_maps_flutter_platform_interface/src/types/types.dart": types
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["tile_overlay.dart","polyline.dart","polygon.dart","marker.dart","circle.dart","../ui.dart","../tile_provider.dart","../tile_overlay.dart","../polyline.dart","../polyline_updates.dart","../polygon.dart","../polygon_updates.dart","../marker.dart","../marker_updates.dart","../circle.dart","../circle_updates.dart","../cap.dart","../camera.dart","../callbacks.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../packages/google_maps_flutter_platform_interface/src/types/utils/tile_overlay.dart.lib.js"}');
  // Exports:
  return {
    src__types__utils__tile_overlay: tile_overlay,
    src__types__utils__polyline: polyline,
    src__types__utils__polygon: polygon,
    src__types__utils__marker: marker,
    src__types__utils__circle: circle,
    src__types__ui: ui$,
    src__types__tile_provider: tile_provider,
    src__types__tile_overlay: tile_overlay$,
    src__types__polyline: polyline$,
    src__types__polyline_updates: polyline_updates,
    src__types__polygon: polygon$,
    src__types__polygon_updates: polygon_updates,
    src__types__marker: marker$,
    src__types__marker_updates: marker_updates,
    src__types__circle: circle$,
    src__types__circle_updates: circle_updates,
    src__types__cap: cap,
    src__types__camera: camera,
    src__types__callbacks: callbacks,
    src__types__types: types
  };
}));

//# sourceMappingURL=tile_overlay.dart.lib.js.map
